#!/usr/bin/env python3

from curses import meta
import os
import re
import sys
from typing import List, Mapping

GLOBAL_NAMES_PATH = os.path.join(os.path.dirname(
    os.path.realpath(__file__)), 'global_names.txt')

GLOBAL_NAMES_ENTRY = re.compile(
    r'^(?P<name>[\*\?\w\[\]]+)\s+(?P<address>[\d\w]{4})\s+(?P<size>byte|word|long|\d+|-)(?P<description>.+)')


HEADER = """
# pragma once

# include <cstdint>

const char* GetGlobalVarName(uint32_t address);

"""

CC_HEADER = """
// Auto-generated by: //gen/main.py
# include "global_names.h"

# include <iomanip>

# include "core/logging.h"
"""

SWITCH_CASE = """
    case {}: return "{}";
"""


def parse_args():
  if len(sys.argv) != 2:
    print('Output path required')
    sys.exit(-1)

  output = sys.argv[1]
  print('Saving to:', output + '.{cc,h}')
  cc_path = '{}.cc'.format(output)
  h_path = '{}.h'.format(output)
  return (cc_path, h_path)


def main():
  (cc_path, h_path) = parse_args()

  address_to_metadata: Mapping[int, List[dict]] = {}
  error_lines = []
  with open(GLOBAL_NAMES_PATH, 'r') as f:
    for count, line in enumerate(f.readlines()):
      # Skip blank lines
      if not line.strip():
        continue

      match = GLOBAL_NAMES_ENTRY.match(line)
      if match := GLOBAL_NAMES_ENTRY.match(line):
        name = match.group('name')
        address = match.group('address')
        size = match.group('size')
        description = match.group('description').strip()

        only_64k_rom = '*' == name[0]
        if name == '[????]' or size == '-' or only_64k_rom:
          continue

        is_region = False

        if size == 'byte':
          size = 1
        elif size == 'word':
          size = 2
        elif size == 'long':
          size = 4
        else:
          size = int(size)
          is_region = True

        address = int(address, 16)

        entry = {
            'name': name,
            'size': size,
            'description': description,
            'is_region': is_region
        }
        address_to_metadata.setdefault(address, []).append(entry)
      else:
        error_lines.append((count + 1, line))

  if error_lines:
    for (count, line) in error_lines:
      print(f'Error line {count}: "{line.strip()}"')
    sys.exit(-2)

  # Write the .h
  with open(h_path, 'w') as f:
    f.write(HEADER)

    f.write('enum GlobalVars {')
    for address, metadata in address_to_metadata.items():
      for item in metadata:
        f.write(f"\n  {item['name']} = 0x{address:X},")
    f.write('\n};')

  # Write the .cc
  with open(cc_path, 'w') as f:
    f.write(CC_HEADER)

    # GetTrapName:
    f.write(
        """
const char* GetGlobalVarName(uint32_t address) {
  switch (address) {""")

    for address, metadata in address_to_metadata.items():
      if all(item['is_region'] for item in metadata):
        continue
      
      names = '|'.join(f"{item['name']}[{item['size']}]" for item in metadata)
      f.write(SWITCH_CASE.format(f'0x{address:X}', names))

    f.write("""
    default:
    """)

    for address, metadata in address_to_metadata.items():
      names = [
          f"{item['name']}[{item['size']}]"
          for item in metadata if item['is_region']
      ]

      if not names:
        continue

      end_region = address+ metadata[0]['size']
      f.write(f"""
      if (address >= 0x{address:x} && address < 0x{end_region:x}) {{
        return "{'|'.join(names)}";
      }}
      """)

    f.write("""
      LOG(WARNING) << "Unknown global variable address: 0x" << std::hex << address;
      return nullptr;
  }
}""")


if __name__ == '__main__':
  main()
